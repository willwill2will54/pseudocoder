#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {
    'DECLARE',
    'ENDIF',
    'STEP',
    'THEN',
    'OR',
    'AND',
    'FOR',
    'ENDFOR',
    'IF',
    'ELSE',
    'TO',
    'OUTPUT',
}  # type: ignore


class PseudoCodeBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class PseudoCodeParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        tokenizercls=PseudoCodeBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _program_(self):  # noqa
        self._instructions_()
        self.name_last_node('@')
        self._check_eof()

    @tatsumasu()
    def _instructions_(self):  # noqa

        def block0():
            self._instruction_()
        self._closure(block0)

    @tatsumasu()
    def _instruction_(self):  # noqa
        with self._choice():
            with self._option():
                self._if_()
                self.name_last_node('@')
            with self._option():
                self._assignment_()
                self.name_last_node('@')
            with self._option():
                self._for_()
                self.name_last_node('@')
            with self._option():
                self._declare_()
                self.name_last_node('@')
            with self._option():
                self._output_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'IF' <if> <identifier> <assignment>"
                "'FOR' <for> 'DECLARE' <declare> 'OUTPUT'"
                '<output>'
            )

    @tatsumasu()
    def _if_(self):  # noqa
        self._token('IF')
        self._expression_()
        self._token('THEN')
        self._instructions_()
        with self._optional():
            self._token('ELSE')
            self._instructions_()
        self._token('ENDIF')

    @tatsumasu()
    def _for_(self):  # noqa
        self._token('FOR')
        self._identifier_()
        self._assign_()
        self._expression_()
        self._token('TO')
        self._expression_()
        with self._optional():
            self._token('STEP')
            self._expression_()
        self._instructions_()
        self._token('ENDFOR')

    @tatsumasu()
    def _output_(self):  # noqa
        self._token('OUTPUT')
        self._expression_()

    @tatsumasu()
    def _declare_(self):  # noqa
        self._token('DECLARE')
        self._identifier_()
        self._token(':')
        self._expression_()

    @tatsumasu()
    def _assignment_(self):  # noqa
        self._identifier_()
        self._assign_()
        self._expression_()

    @tatsumasu()
    def _assign_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('<-')
            with self._option():
                self._token('←')
            self._error(
                'expecting one of: '
                "'<-' '←'"
            )

    @tatsumasu()
    @leftrec
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._arithmetic_expression_()
                self.name_last_node('@')
            with self._option():
                self._non_arithmetic_expression_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "<summing> <arithmetic_expression> '('"
                '<boolean_expression> <literal>'
                '<identifier> <non_arithmetic_expression>'
            )

    @tatsumasu()
    @nomemo
    def _arithmetic_expression_(self):  # noqa
        self._summing_()
        self.name_last_node('@')

    @tatsumasu()
    @nomemo
    def _non_arithmetic_expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')
                self._expression_()
                self._token(')')
            with self._option():
                self._boolean_expression_()
            with self._option():
                self._literal_()
            with self._option():
                self._identifier_()
            self._error(
                'expecting one of: '
                "'(' <comparison> <and> <or>"
                "<boolean_expression> [1-9]\\d* '0'"
                '<integer_literal> \\d+.\\d* <real_literal>'
                '<number_literal> <literal> [A-Za-z_]\\w*'
                '<identifier>'
            )

    @tatsumasu()
    @nomemo
    def _boolean_expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._comparison_()
            with self._option():
                self._and_()
            with self._option():
                self._or_()
            self._error(
                'expecting one of: '
                '<equal_to> <not_equal_to> <less_than>'
                '<greater_than> <less_than_or_equal_to>'
                '<greater_than_or_equal_to> <comparison>'
                '<arithmetic_expression>'
                '<non_arithmetic_expression> <expression>'
                '<and> <or>'
            )

    @tatsumasu()
    @nomemo
    def _and_(self):  # noqa
        self._expression_()
        self._token('AND')
        self._expression_()

    @tatsumasu()
    @nomemo
    def _or_(self):  # noqa
        self._expression_()
        self._token('OR')
        self._expression_()

    @tatsumasu()
    @nomemo
    def _comparison_(self):  # noqa
        with self._choice():
            with self._option():
                self._equal_to_()
            with self._option():
                self._not_equal_to_()
            with self._option():
                self._less_than_()
            with self._option():
                self._greater_than_()
            with self._option():
                self._less_than_or_equal_to_()
            with self._option():
                self._greater_than_or_equal_to_()
            self._error(
                'expecting one of: '
                '<arithmetic_expression>'
                '<non_arithmetic_expression> <expression>'
                '<equal_to> <not_equal_to> <less_than>'
                '<greater_than> <less_than_or_equal_to>'
                '<greater_than_or_equal_to>'
            )

    @tatsumasu()
    @nomemo
    def _equal_to_(self):  # noqa
        self._expression_()
        self._token('=')
        self._expression_()

    @tatsumasu()
    @nomemo
    def _not_equal_to_(self):  # noqa
        self._expression_()
        self._token('<>')
        self._expression_()

    @tatsumasu()
    @nomemo
    def _less_than_(self):  # noqa
        self._expression_()
        self._token('<')
        self._expression_()

    @tatsumasu()
    @nomemo
    def _greater_than_(self):  # noqa
        self._expression_()
        self._token('>')
        self._expression_()

    @tatsumasu()
    @nomemo
    def _less_than_or_equal_to_(self):  # noqa
        self._expression_()
        self._token('<=')
        self._expression_()

    @tatsumasu()
    @nomemo
    def _greater_than_or_equal_to_(self):  # noqa
        self._expression_()
        self._token('>=')
        self._expression_()

    @tatsumasu()
    def _integer_literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('[1-9]\\d*')
            with self._option():
                self._token('0')
            self._error(
                'expecting one of: '
                "[1-9]\\d* '0'"
            )

    @tatsumasu()
    def _real_literal_(self):  # noqa
        self._pattern('\\d+.\\d*')

    @tatsumasu()
    def _number_literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._integer_literal_()
                self.name_last_node('@')
            with self._option():
                self._real_literal_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "[1-9]\\d* '0' <integer_literal> \\d+.\\d*"
                '<real_literal>'
            )

    @tatsumasu()
    def _literal_(self):  # noqa
        self._number_literal_()
        self.name_last_node('@')

    @tatsumasu()
    @leftrec
    def _summing_(self):  # noqa
        with self._choice():
            with self._option():
                self._summing_()
                self._token('+')
                self._summing_()
            with self._option():
                self._summing_()
                self._token('-')
                self._summing_()
            with self._option():
                self._product_()
            self._error(
                'expecting one of: '
                '<summing> <product> <factor>'
            )

    @tatsumasu()
    @leftrec
    def _product_(self):  # noqa
        with self._choice():
            with self._option():
                self._product_()
                self._token('*')
                self._product_()
            with self._option():
                self._product_()
                self._token('/')
                self._product_()
            with self._option():
                self._factor_()
            self._error(
                'expecting one of: '
                "<product> <factor> '('"
                '<boolean_expression> <literal>'
                '<identifier> <non_arithmetic_expression>'
            )

    @tatsumasu()
    @nomemo
    def _factor_(self):  # noqa
        self._non_arithmetic_expression_()

    @tatsumasu()
    @isname
    def _identifier_(self):  # noqa
        self._pattern('[A-Za-z_]\\w*')


class PseudoCodeSemantics(object):
    def program(self, ast):  # noqa
        return ast

    def instructions(self, ast):  # noqa
        return ast

    def instruction(self, ast):  # noqa
        return ast

    def if_(self, ast):  # noqa
        return ast

    def for_(self, ast):  # noqa
        return ast

    def output(self, ast):  # noqa
        return ast

    def declare(self, ast):  # noqa
        return ast

    def assignment(self, ast):  # noqa
        return ast

    def assign(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def arithmetic_expression(self, ast):  # noqa
        return ast

    def non_arithmetic_expression(self, ast):  # noqa
        return ast

    def boolean_expression(self, ast):  # noqa
        return ast

    def and_(self, ast):  # noqa
        return ast

    def or_(self, ast):  # noqa
        return ast

    def comparison(self, ast):  # noqa
        return ast

    def equal_to(self, ast):  # noqa
        return ast

    def not_equal_to(self, ast):  # noqa
        return ast

    def less_than(self, ast):  # noqa
        return ast

    def greater_than(self, ast):  # noqa
        return ast

    def less_than_or_equal_to(self, ast):  # noqa
        return ast

    def greater_than_or_equal_to(self, ast):  # noqa
        return ast

    def integer_literal(self, ast):  # noqa
        return ast

    def real_literal(self, ast):  # noqa
        return ast

    def number_literal(self, ast):  # noqa
        return ast

    def literal(self, ast):  # noqa
        return ast

    def summing(self, ast):  # noqa
        return ast

    def product(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'program'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = PseudoCodeParser()
    return parser.parse(
        text,
        rule_name=start,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, PseudoCodeParser, name='PseudoCode')
    data = asjson(ast)
    print(json.dumps(data, indent=2))

